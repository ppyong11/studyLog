# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

#workflow 실행 트리거
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
#빌드
jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    #repository 체크아웃
    - uses: actions/checkout@v4
    #jdk 환경 설치
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    #application 파일 세팅
    - name: application 파일 설정
      run: |
        mkdir -p src/main/resources
        echo "${{ secrets.APPLICATION }}" | base64 -d > src/main/resources/application.yml
    #gradle 설치
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #실행 권한 주기
    - name: Grant execute permission to graldew
      run: chmod +x gradlew
    #빌드
    - name: Build with Gradle Wrapper
      run: ./gradlew build -x test
    #이름 변수
    - name: Set datetime var
      run: echo "DATETIME=$(date+'%Y%m%d-%H%M')" >> $GITHUB_ENV
    #빌드된 파일 이름 변경
    - name: Change Build Name
      run: mv build/libs/studyLog-0.0.1-SNAPSHOT.jar build/libs/studyLog-${{ env.DATETIME }}.jar
    #EC2에 전송
    - name: Send jar to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: build/libs/studyLog-${{ env.DATETIME }}.jar #로컬 경로
        target: /home/ubuntu/ #전송되는 경로
    #서버 재실행
    - name: SSH into EC2 and run jar
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          pkill -f 'java -jar' || echo "No existing process"
          nohup java -jar /home/ubuntu/studyLog-${{ env.DATETIME }}.jar > app.log 2>&1 &




    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
